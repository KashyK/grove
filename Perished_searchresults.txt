Searching for you have inyour entire workspace (Found 188 matches in 125 files)

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-block-scoping/node_modules/babel-template/node_modules/babylon/lib/index.js:
	2409:     this.raise(this.state.start, "You have trailing decorators with no method");
	3880:     this.raise(this.state.start, "You have trailing decorators with no property");

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-block-scoping/node_modules/babel-traverse/node_modules/babylon/lib/index.js:
	2409:     this.raise(this.state.start, "You have trailing decorators with no method");
	3880:     this.raise(this.state.start, "You have trailing decorators with no property");

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-block-scoping/node_modules/babel-traverse/node_modules/debug/Readme.md:
	82:  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".
	92:   Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. You can enable this using `localStorage.debug`:

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-template/node_modules/babylon/lib/index.js:
	2409:     this.raise(this.state.start, "You have trailing decorators with no method");
	3880:     this.raise(this.state.start, "You have trailing decorators with no property");

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-traverse/node_modules/babylon/lib/index.js:
	2409:     this.raise(this.state.start, "You have trailing decorators with no method");
	3880:     this.raise(this.state.start, "You have trailing decorators with no property");

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-classes/node_modules/babel-traverse/node_modules/debug/Readme.md:
	82:  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".
	92:   Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. You can enable this using `localStorage.debug`:

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-computed-properties/node_modules/babel-helper-define-map/node_modules/babel-helper-function-name/node_modules/babel-traverse/node_modules/babylon/lib/index.js:
	2409:     this.raise(this.state.start, "You have trailing decorators with no method");
	3880:     this.raise(this.state.start, "You have trailing decorators with no property");

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-computed-properties/node_modules/babel-helper-define-map/node_modules/babel-helper-function-name/node_modules/babel-traverse/node_modules/debug/Readme.md:
	82:  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".
	92:   Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. You can enable this using `localStorage.debug`:

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-computed-properties/node_modules/babel-template/node_modules/babel-traverse/node_modules/debug/Readme.md:
	82:  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".
	92:   Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. You can enable this using `localStorage.debug`:

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-computed-properties/node_modules/babel-template/node_modules/babylon/lib/index.js:
	2409:     this.raise(this.state.start, "You have trailing decorators with no method");
	3880:     this.raise(this.state.start, "You have trailing decorators with no property");

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-function-name/node_modules/babel-helper-function-name/node_modules/babel-template/node_modules/babylon/lib/index.js:
	2409:     this.raise(this.state.start, "You have trailing decorators with no method");
	3880:     this.raise(this.state.start, "You have trailing decorators with no property");

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-function-name/node_modules/babel-helper-function-name/node_modules/babel-traverse/node_modules/babylon/lib/index.js:
	2409:     this.raise(this.state.start, "You have trailing decorators with no method");
	3880:     this.raise(this.state.start, "You have trailing decorators with no property");

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-function-name/node_modules/babel-helper-function-name/node_modules/babel-traverse/node_modules/debug/Readme.md:
	82:  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".
	92:   Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. You can enable this using `localStorage.debug`:

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-modules-amd/node_modules/babel-template/node_modules/babel-traverse/node_modules/debug/Readme.md:
	82:  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".
	92:   Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. You can enable this using `localStorage.debug`:

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-modules-amd/node_modules/babel-template/node_modules/babylon/lib/index.js:
	2409:     this.raise(this.state.start, "You have trailing decorators with no method");
	3880:     this.raise(this.state.start, "You have trailing decorators with no property");

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-template/node_modules/babel-traverse/node_modules/debug/Readme.md:
	82:  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".
	92:   Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. You can enable this using `localStorage.debug`:

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-modules-commonjs/node_modules/babel-template/node_modules/babylon/lib/index.js:
	2409:     this.raise(this.state.start, "You have trailing decorators with no method");
	3880:     this.raise(this.state.start, "You have trailing decorators with no property");

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-modules-systemjs/node_modules/babel-template/node_modules/babel-traverse/node_modules/debug/Readme.md:
	82:  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".
	92:   Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. You can enable this using `localStorage.debug`:

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-modules-systemjs/node_modules/babel-template/node_modules/babylon/lib/index.js:
	2409:     this.raise(this.state.start, "You have trailing decorators with no method");
	3880:     this.raise(this.state.start, "You have trailing decorators with no property");

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-modules-umd/node_modules/babel-template/node_modules/babel-traverse/node_modules/debug/Readme.md:
	82:  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".
	92:   Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. You can enable this using `localStorage.debug`:

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-modules-umd/node_modules/babel-template/node_modules/babylon/lib/index.js:
	2409:     this.raise(this.state.start, "You have trailing decorators with no method");
	3880:     this.raise(this.state.start, "You have trailing decorators with no property");

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-object-super/node_modules/babel-helper-replace-supers/node_modules/babel-template/node_modules/babylon/lib/index.js:
	2409:     this.raise(this.state.start, "You have trailing decorators with no method");
	3880:     this.raise(this.state.start, "You have trailing decorators with no property");

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-object-super/node_modules/babel-helper-replace-supers/node_modules/babel-traverse/node_modules/babylon/lib/index.js:
	2409:     this.raise(this.state.start, "You have trailing decorators with no method");
	3880:     this.raise(this.state.start, "You have trailing decorators with no property");

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-object-super/node_modules/babel-helper-replace-supers/node_modules/babel-traverse/node_modules/debug/Readme.md:
	82:  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".
	92:   Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. You can enable this using `localStorage.debug`:

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-parameters/node_modules/babel-template/node_modules/babylon/lib/index.js:
	2409:     this.raise(this.state.start, "You have trailing decorators with no method");
	3880:     this.raise(this.state.start, "You have trailing decorators with no property");

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-parameters/node_modules/babel-traverse/node_modules/babylon/lib/index.js:
	2409:     this.raise(this.state.start, "You have trailing decorators with no method");
	3880:     this.raise(this.state.start, "You have trailing decorators with no property");

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-parameters/node_modules/babel-traverse/node_modules/debug/Readme.md:
	82:  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".
	92:   Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. You can enable this using `localStorage.debug`:

/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-regenerator/node_modules/regenerator-transform/node_modules/private/README.md:
	62: Unless you have access to the value of the `secretKey` property name, there is no way to access the value associated with it. So your only responsibility as secret-keeper is to avoid handing out the value of `secretKey` to untrusted code.
	119: Suppose you have a `Node` class with a notion of parents and children:

/node_modules/babelify/README.md:
	70: you have to add them back.

/node_modules/babelify/node_modules/babel-core/node_modules/babel-register/node_modules/source-map-support/README.md:
	14: Source maps can be generated using libraries such as [source-map-index-generator](https://github.com/twolfson/source-map-index-generator). Once you have a valid source map, insert the following line at the top of your compiled code:
	71: This module installs two things: a change to the `stack` property on `Error` objects and a handler for uncaught exceptions that mimics node's default exception handler (the handler can be seen in the demos below). You may want to disable the handler if you have your own uncaught exception handler. This can be done by passing an argument to the installer:

/node_modules/babelify/node_modules/babel-core/node_modules/babylon/lib/index.js:
	2409:     this.raise(this.state.start, "You have trailing decorators with no method");
	3880:     this.raise(this.state.start, "You have trailing decorators with no property");

/node_modules/babelify/node_modules/babel-core/node_modules/debug/Readme.md:
	82:  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".
	92:   Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. You can enable this using `localStorage.debug`:

/node_modules/babelify/node_modules/babel-core/node_modules/minimatch/minimatch.js:
	535:       // I am sorry that you have to see this.

/node_modules/babelify/node_modules/babel-core/node_modules/private/README.md:
	62: Unless you have access to the value of the `secretKey` property name, there is no way to access the value associated with it. So your only responsibility as secret-keeper is to avoid handing out the value of `secretKey` to untrusted code.
	119: Suppose you have a `Node` class with a notion of parents and children:

/node_modules/body-parser/node_modules/debug/Readme.md:
	76:  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".
	86:   Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. Somewhere in the code on your page, include:

/node_modules/compression/node_modules/debug/Readme.md:
	76:  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".
	86:   Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. Somewhere in the code on your page, include:

/node_modules/ejs-locals/package.json:
	36:   "readme": "# ejs-locals\n\nExpress 3.x `layout`, `partial` and `block` template functions for the EJS template engine. \n\nPreviously also offered `include` but you should use EJS 0.8.x's own method for that now.\n\n## Installation\n\n    $ npm install ejs-locals --save\n\n(`--save` automatically writes to your `package.json` file, tell your friends)\n\n\n## Usage\n\nRun `node app.js` from `examples` and open `localhost:3000` to see a working example.\n\nGiven a template, `index.ejs`:\n\n    <% layout('boilerplate') -%>\n    <% script('foo.js') -%>\n    <% stylesheet('foo.css') -%>\n    <h1>I am the <%=what%> template</h1>\n    <% block('header', \"<p>I'm in the header.</p>\") -%>\n    <% block('footer', \"<p>I'm in the footer.</p>\") -%>\n\nAnd a layout, `boilerplate.ejs`:\n\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>It's <%=who%></title>\n        <%-scripts%>\n        <%-stylesheets%>\n      </head>\n      <body>\n        <header>\n          <%-blocks.header%>\n        </header>\n        <section>\n          <%-body -%>\n        </section>\n        <footer>\n          <%-blocks.footer%>\n        </footer>\n      </body>\n    </html>\n\nWhen rendered by an Express 3.0 app:\n\n    var express = require('express')\n      , engine = require('ejs-locals')\n      , app = express();\n\n    // use ejs-locals for all ejs templates:\n    app.engine('ejs', engine);\n\n    app.set('views',__dirname + '/views');\n    app.set('view engine', 'ejs'); // so you can render('index')\n\n    // render 'index' into 'boilerplate':\n    app.get('/',function(req,res,next){\n      res.render('index', { what: 'best', who: 'me' });\n    });\n\n    app.listen(3000);\n\nYou get the following result:\n\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>It's me</title>\n        <script src=\"foo.js\"></script>\n        <link rel=\"stylesheet\" href=\"foo.css\" />\n      </head>\n      <body>\n        <header>\n          <p>I'm in the header.</p>\n        </header>\n        <section>\n          <h1>I am the best template</h1>\n        </section>\n        <footer>\n          <p>I'm in the footer.</p>\n        </footer>\n      </body>\n    </html>\n\nNote, if you haven't seen it before, this example uses trailing dashes in the EJS includes to slurp trailing whitespace and generate cleaner HTML. It's not strictly necessary.\n\n\n## Features\n\n### `layout(view)`\n\nWhen called anywhere inside a template, requests that the output of the current template be passed to the given view as the `body` local. Use this to specify layouts from within your template, which is recommended with Express 3.0, since the app-level layout functionality has been removed.\n\n### `partial(name,optionsOrCollection)`\n\nWhen called anywhere inside a template, adds the given view to that template using the current given `optionsOrCollection`. The usual way to use this is to pass an Array as the collection argument. The given view is then executed for each item in the Array; the item is passed into the view as a local with a name generated from the view's filename.\n\nFor example, if you do `<%-partial('thing',things)%>` then each item in the `things` Array is passed to `thing.ejs` with the name `thing`. If you rename the template, the local name of each item will correspond to the template name.\n\n### `block(name,html)`\n\nWhen called anywhere inside a template, adds the given html to the named block. In the layout you can then do `<%-block('foo')%> to render all the html for that block.\n\nSince this relies on javascript strings, and bypasses EJS's default escaping, you should be very careful if you use this function with user-submitted data.\n\n### `script(src,type)`\n\nA convenience function for `block('scripts', '<script src=\"src.js\"></script>')` with optional type. When called anywhere inside a template, adds a script tag with the given src/type to the scripts block. In the layout you can then do `<%-scripts%> to output the scripts from all the child templates.\n\n### `stylesheet(href,media)`\n\nA convenience function for `block('stylesheets', '<link rel=\"stylesheet\" href=\"href.css\" />')` with optional media type. When called anywhere inside a template, adds a link tag for the stylesheet with the given href/media to the stylesheets block. In the layout you can then do `<%-stylesheets%> to output the links from all the child templates.\n\n\n## Template Support\n\n  - `ejs` (actually hard coded right now, but feel free to __fork and help!__)\n\n\n## TODO\n\n - More Tests!\n - More templates.\n - Better, safer (autoescaped) syntax for longer blocks\n\n\n## Running Tests\n\nTo run the test suite first invoke the following command within the repo, installing the development dependencies:\n\n    $ npm install -d\n\nthen run the tests:\n\n    $ npm test\n\n\n## Backwards Compatibility\n\nExpress 2.0 had similar functionality built in, using `{ layout: 'view' }` as an argument to  `res.render` but this has been removed in Express 3.0. If you want the old behavior you should do:\n\n    app.locals({\n      _layoutFile: true\n    })\n\n\nAnd/or pass `_layoutFile: true` in the options when you call `res.render(...)`.\n\n## Whither Include?\n\nPrevious versions of this library had an `include` function. This is now supported directly by EJS, albeit with a different syntax. For `ejs-locals` 1.0+ simply do:\n\n### `<% include path/view %>`\n\nWhen called anywhere inside a template, this adds the given view to that template using the current options and locals. This is built-in to [EJS](https://github.com/visionmedia/ejs) 0.8+.\n\n## Credits\n\nThis library is a fork from Robert Sk&ouml;ld's [express-partials](https://github.com/publicclass/express-partials), and the partial function remains relatively untouched from there (aside from cache support). Robert is still updating his library and it now supports other template engines - check it out!\n\nThe blocks idea and syntax comes from Aseem Kishore's [express-blocks](https://github.com/aseemk/express-blocks)\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 Robert Sk&ouml;ld &lt;robert@publicclass.se&gt;\nCopyright (c) 2012 Tom Carden &lt;tom@tom-carden.co.uk&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",

/node_modules/ejs-locals/README.md:
	90: Note, if you haven't seen it before, this example uses trailing dashes in the EJS includes to slurp trailing whitespace and generate cleaner HTML. It's not strictly necessary.

/node_modules/ejs-locals/node_modules/ejs/Readme.md:
	57:  for example if you have "./views/users.ejs" and "./views/user/show.ejs"

/node_modules/express-session/README.md:
	188: **Note** if you have multiple apps running on the same hostname (this is just

/node_modules/express-session/node_modules/debug/Readme.md:
	76:  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".
	86:   Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. Somewhere in the code on your page, include:

/node_modules/express/node_modules/debug/Readme.md:
	76:  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".
	86:   Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. Somewhere in the code on your page, include:

/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/README.md:
	47: before returning. It is useful when you have a Node.js instance listening

/node_modules/express/node_modules/send/README.md:
	136: made, otherwise you have full control over the response, aka you may show a 5xx

/node_modules/grunt-browserify/README.md:
	178: For watchify to work properly, you have to keep the process running. The option `keepAlive` can help you do that, or you can use another `grunt-watch` task.

/node_modules/grunt-browserify/node_modules/browserify/node_modules/concat-stream/node_modules/readable-stream/doc/stream.markdown:
	67:   // the end event tells you that you have entire body
	1703: Very rarely, there are cases where you have no data to provide now,
	1710: find that you have to use `stream.push('')`, please consider another

/node_modules/grunt-browserify/node_modules/browserify/node_modules/glob/node_modules/minimatch/minimatch.js:
	535:       // I am sorry that you have to see this.

/node_modules/grunt-browserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/lexical-scope/node_modules/astw/node_modules/acorn/README.md:
	348: combine such plugins, so that if you have, for example, a plugin for

/node_modules/grunt-browserify/node_modules/browserify/node_modules/module-deps/node_modules/detective/node_modules/acorn/README.md:
	361: combine such plugins, so that if you have, for example, a plugin for

/node_modules/grunt-browserify/node_modules/browserify/node_modules/read-only-stream/readme.markdown:
	10: Suppose you have a module that uses a readable/writable stream internally but

/node_modules/grunt-browserify/node_modules/browserify/node_modules/syntax-error/node_modules/acorn/README.md:
	356: combine such plugins, so that if you have, for example, a plugin for

/node_modules/grunt-browserify/node_modules/browserify/node_modules/through2/README.md:
	82: To queue a new chunk, call `this.push(chunk)`&mdash;this can be called as many times as required before the `callback()` if you have multiple pieces to send on.

/node_modules/grunt-browserify/node_modules/browserify/node_modules/timers-browserify/README.md:
	35: Linked lists are efficient when you have thousands (millions?) of timers with the same delay.

/node_modules/grunt-browserify/node_modules/browserify/node_modules/url/test.js:
	1573: // url.resolve('f:/a', './/g') does not have a host because you have moved

/node_modules/grunt-browserify/node_modules/glob/node_modules/minimatch/minimatch.js:
	535:       // I am sorry that you have to see this.

/node_modules/grunt-browserify/node_modules/watchify/node_modules/anymatch/node_modules/micromatch/node_modules/regex-cache/README.md:
	119: Using the RegExp constructor offers a lot of flexibility, but the runtime compilation comes at a price - it's slow. Not specifically because of the call to the RegExp constructor, but **because you have to build up the string before `new RegExp()` is even called**.

/node_modules/grunt-browserify/node_modules/watchify/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/minimatch.js:
	535:       // I am sorry that you have to see this.

/node_modules/grunt-browserify/node_modules/watchify/node_modules/outpipe/readme.markdown:
	7: Suppose you have a tool like

/node_modules/grunt-browserify/node_modules/watchify/node_modules/through2/README.md:
	82: To queue a new chunk, call `this.push(chunk)`&mdash;this can be called as many times as required before the `callback()` if you have multiple pieces to send on.

/node_modules/grunt-contrib-sass/README.md:
	9: If you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:
	29: This task requires you to have [Ruby](http://www.ruby-lang.org/en/downloads/) and [Sass](http://sass-lang.com/download.html) installed. If you're on OS X or Linux you probably already have Ruby installed; test with `ruby -v` in your terminal. When you've confirmed you have Ruby installed, run `gem install sass` to install Sass.

/node_modules/grunt-contrib-uglify/README.md:
	9: If you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:

/node_modules/grunt-contrib-uglify/node_modules/maxmin/node_modules/gzip-size/node_modules/concat-stream/node_modules/readable-stream/doc/stream.markdown:
	67:   // the end event tells you that you have entire body
	1703: Very rarely, there are cases where you have no data to provide now,
	1710: find that you have to use `stream.push('')`, please consider another

/node_modules/grunt-contrib-uglify/node_modules/uglify-js/README.md:
	16: First make sure you have installed the latest version of [node.js](http://nodejs.org/)
	192: option to take an input source map.  Assuming you have a mapping from

/node_modules/grunt-contrib-watch/README.md:
	9: If you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:

/node_modules/grunt-contrib-watch/node_modules/gaze/node_modules/globule/node_modules/minimatch/minimatch.js:
	535:       // I am sorry that you have to see this.

/node_modules/grunt-contrib-watch/node_modules/tiny-lr/node_modules/debug/Readme.md:
	76:  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".
	86:   Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. Somewhere in the code on your page, include:

/node_modules/grunt-contrib-watch/node_modules/tiny-lr/node_modules/livereload-js/README.md:
	173: The `LiveReload` object is also exposed as `window.LiveReload`, with `LiveReload.disconnect()`, `LiveReload.connect()`, and `LiveReload.shutDown()` available. However, I'm not yet sure if I want to keep this API, so consider it non-contractual. (And please tell me if you have a use for it!)

/node_modules/grunt/CHANGELOG:
	9:     - if you have a Grunt plugin that includes `grunt` in the `peerDependencies`,
	22:     - if you have a Grunt plugin that includes `grunt` in the `peerDependencies`,

/node_modules/grunt/node_modules/coffee-script/README.md:
	25: If you have the node package manager, npm, installed:

/node_modules/grunt/node_modules/grunt-cli/README.md:
	11: **Note:** The job of the `grunt` command is to load and run the version of Grunt you have installed locally to your project, irrespective of its version.  Starting with Grunt v0.4, you should never install Grunt itself globally.  For more information about why, [please read this](http://nodejs.org/en/blog/npm/npm-1-0-global-vs-local-installation).

/node_modules/grunt/node_modules/grunt-legacy-util/README.md:
	8: With the next major release of Grunt, we will no longer support these APIs.  Where possible, please use the recommended modules in their place.  If you would like to support or improve any of these APIs, please notify us when you have published a backwards compatible npm module&mdash;we will then recommend its usage here.

/node_modules/grunt/node_modules/js-yaml/README.md:
	278: If you have not used __custom__ tags or loader classes and not loaded yaml

/node_modules/grunt/node_modules/minimatch/minimatch.js:
	535:       // I am sorry that you have to see this.

/node_modules/helmet/security.md:
	3: If you feel you have found a security issue or concern with Helmet please email me at baldwin@andyet.net.

/node_modules/helmet/node_modules/connect/node_modules/debug/Readme.md:
	76:  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".
	86:   Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. Somewhere in the code on your page, include:

/node_modules/helmet/node_modules/helmet-csp/README.md:
	111: The default behavior of CSP is generate headers tailored for the browser that's requesting your page. If you have a CDN in front of your application, the CDN may cache the wrong headers, rendering your CSP useless. Make sure to eschew a CDN when using this module or set the `browserSniff` option to `false`.

/node_modules/helmet/node_modules/hsts/README.md:
	42: This header will be set `req.secure` is true, a boolean auto-populated by Express. If you're not using Express, that value won't necessarily be set, so you have two options:

/node_modules/jade/Readme_zh-cn.md:
	466:         p you have no friends
	468:         p you have a friend
	470:         p you have #{friends} friends
	481:       when 0: p you have no friends
	482:       when 1: p you have a friend
	483:       default: p you have #{friends} friends

/node_modules/jade/node_modules/clean-css/bin/cleancss:
	100:   outputFeedback(['Source maps will not be built because you have not specified an output file.'], true);

/node_modules/jade/node_modules/clean-css/node_modules/commander/Readme.md:
	105:  The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you have to

/node_modules/jade/node_modules/clean-css/node_modules/source-map/README.md:
	491: The `assert` argument is a cut down version of node's assert module. You have

/node_modules/jade/node_modules/commander/Readme.md:
	91:  The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you have to

/node_modules/jade/node_modules/constantinople/node_modules/acorn/README.md:
	356: combine such plugins, so that if you have, for example, a plugin for

/node_modules/jade/node_modules/jstransformer/node_modules/promise/Readme.md:
	176:   You can use inheritance if you want to create your own complete promise library with this as your basic starting point, perfect if you have lots of cool features you want to add.  Here is an example of a promise library called `Awesome`, which is built on top of `Promise` correctly.

/node_modules/jade/node_modules/transformers/node_modules/promise/Readme.md:
	40:   You can use inheritance if you want to create your own complete promise library with this as your basic starting point, perfect if you have lots of cool features you want to add.  Here is an example of a promise library called `Awesome`, which is built on top of `Promise` correctly.

/node_modules/jade/node_modules/transformers/node_modules/uglify-js/README.md:
	15: First make sure you have installed the latest version of [node.js](http://nodejs.org/)
	132: option to take an input source map.  Assuming you have a mapping from

/node_modules/jade/node_modules/transformers/node_modules/uglify-js/node_modules/source-map/README.md:
	456: The `assert` argument is a cut down version of node's assert module. You have

/node_modules/jade/node_modules/uglify-js/README.md:
	16: First make sure you have installed the latest version of [node.js](http://nodejs.org/)
	192: option to take an input source map.  Assuming you have a mapping from

/node_modules/jade/node_modules/with/node_modules/acorn-globals/node_modules/acorn/README.md:
	356: combine such plugins, so that if you have, for example, a plugin for

/node_modules/jade/node_modules/with/node_modules/acorn/README.md:
	348: combine such plugins, so that if you have, for example, a plugin for

/node_modules/mongoose/CONTRIBUTING.md:
	3: If you have a question about Mongoose (not a bug report) please post it to either [StackOverflow](http://stackoverflow.com/questions/tagged/mongoose), or on [Gitter](https://gitter.im/Automattic/mongoose?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

/node_modules/mongoose/lib/aggregate.js:
	108:  *     // you have keys already prefixed with a "-"

/node_modules/mongoose/lib/model.js:
	3334:       throw new Error('You have a method and a property in your schema both ' +

/node_modules/mongoose/lib/query.js:
	203:  * Only use `$where` when you have a condition that cannot be met using other MongoDB operators like `$lt`.
	730:  *     // you have keys already prefixed with a "-"

/node_modules/mongoose/lib/schema.js:
	480:     'unless you have disabled versioning.';

/node_modules/mongoose/node_modules/hooks-fixed/README.md:
	10: Suppose you have a JavaScript object with a `save` method.
	237: Post middleware intercepts the callback originally sent to the asynchronous function you have hooked to.
	278: For instance, you may only want to save a Document only after you have checked

/node_modules/mongoose/node_modules/mongodb/README.md:
	50: Given that you have created your own project using `npm init` we install the mongodb driver and it's dependencies by executing the following `NPM` command.
	83: If all the steps complete you have the right toolchain installed. If you get node-gyp not found you need to install it globally by doing.
	127: This should rebuild the driver successfully if you have everything set up correctly.

/node_modules/mongoose/node_modules/mquery/README.md:
	679: // you have keys already prefixed with a "-"
	808: Only use `$where` when you have a condition that cannot be met using other MongoDB operators like `$lt`. Be sure to read about all of [its caveats](http://docs.mongodb.org/manual/reference/operator/where/) before using.

/node_modules/mongoose/node_modules/mquery/lib/mquery.js:
	1087:  *     // you have keys already prefixed with a "-"

/node_modules/mongoose/node_modules/mquery/node_modules/bluebird/README.md:
	547: Make sure you have cloned the repo somewhere and did `npm install` successfully.

/node_modules/mongoose/node_modules/mquery/node_modules/debug/Readme.md:
	76:  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".
	86:   Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. Somewhere in the code on your page, include:

/node_modules/postal/README.md:
	94: In my experience, seeing publish and subscribe calls all over application logic is usually a strong code smell. Ideally, the majority of message-bus integration should be concealed within application infrastructure. Having a hierarchical-wildcard-bindable topic system makes it very easy to keep things concise (especially subscribe calls!). For example, if you have a module that needs to listen to every message published on the ShoppingCart channel, you'd simply subscribe to "\#", and never have to worry about additional subscribes on that channel again - even if you add new messages in the future. If you need to capture all messages with ".validation" at the end of the topic, you'd simply subscribe to "\#.validation". If you needed to target all messages with topics that started with "Customer.", ended with ".validation" and had only one period-delimited segment in between, you'd subscribe to "Customer.*.validation" (thus your subscription would capture Customer.address.validation and Customer.email.validation").

/node_modules/request/request.js:
	520:     //   console.error('You have already piped to this stream. Pipeing twice is likely to break the request.')

/node_modules/request/node_modules/combined-stream/node_modules/delayed-stream/Readme.md:
	53: `source`, regardless of whether you have released the delayed stream yet or

/node_modules/request/node_modules/har-validator/node_modules/commander/Readme.md:
	105:  The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you have to

/node_modules/request/node_modules/hawk/node_modules/boom/README.md:
	532: Boom.tooManyRequests('you have exceeded your request limit');
	541:     "message": "you have exceeded your request limit"

/node_modules/request/node_modules/http-signature/node_modules/assert-plus/README.md:
	64: environment variable `NODE_NDEBUG=1`.  This is pseudo-useful if you have

/node_modules/request/node_modules/http-signature/node_modules/jsprim/node_modules/verror/README.md:
	34: happened at various levels in the stack.  For example, suppose you have a

/node_modules/request/node_modules/http-signature/node_modules/sshpk/node_modules/asn1/README.md:
	7: need this readme to explain what and why.  If you have no idea what ASN.1 is,

/node_modules/request/node_modules/http-signature/node_modules/sshpk/node_modules/asn1/lib/index.js:
	3: // If you have no idea what ASN.1 or BER is, see this:

/node_modules/request/node_modules/http-signature/node_modules/sshpk/node_modules/assert-plus/README.md:
	64: environment variable `NODE_NDEBUG=1`.  This is pseudo-useful if you have

/node_modules/request/node_modules/http-signature/node_modules/sshpk/node_modules/dashdash/README.md:
	309:   Consider if you have a known short option `-a`, and parse the

/node_modules/socket.io/node_modules/debug/Readme.md:
	82:  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".
	92:   Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. You can enable this using `localStorage.debug`:

/node_modules/socket.io/node_modules/socket.io-client/README.md:
	99:   - `autoConnect` by setting this false, you have to call `manager.open`

/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/yeast/README.md:
	77: That's all folks. If you have ideas on how we can further compress the ids

/node_modules/socket.io/node_modules/socket.io-parser/node_modules/debug/Readme.md:
	76:  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".
	86:   Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. Somewhere in the code on your page, include:

/public/bower_components/bootstrap/scss/_dropdown.scss:
	136: // With v3, we enabled auto-flipping if you have a dropdown within a right

/public/js/latest.js:
	951:             $('#load').show().html('<h1>YOU HAVE PERISHED</h1>');

/src/js/main.js:
	74:             $('#load').show().html('<h1>YOU HAVE PERISHED</h1>');

/src/node_modules/grunt/CHANGELOG:
	9:     - if you have a Grunt plugin that includes `grunt` in the `peerDependencies`,
	22:     - if you have a Grunt plugin that includes `grunt` in the `peerDependencies`,

/src/node_modules/grunt/node_modules/coffee-script/README.md:
	25: If you have the node package manager, npm, installed:

/src/node_modules/grunt/node_modules/grunt-cli/README.md:
	11: **Note:** The job of the `grunt` command is to load and run the version of Grunt you have installed locally to your project, irrespective of its version.  Starting with Grunt v0.4, you should never install Grunt itself globally.  For more information about why, [please read this](http://nodejs.org/en/blog/npm/npm-1-0-global-vs-local-installation).

/src/node_modules/grunt/node_modules/grunt-legacy-util/README.md:
	8: With the next major release of Grunt, we will no longer support these APIs.  Where possible, please use the recommended modules in their place.  If you would like to support or improve any of these APIs, please notify us when you have published a backwards compatible npm module&mdash;we will then recommend its usage here.

/src/node_modules/grunt/node_modules/js-yaml/README.md:
	278: If you have not used __custom__ tags or loader classes and not loaded yaml

/src/node_modules/grunt/node_modules/minimatch/minimatch.js:
	535:       // I am sorry that you have to see this.

Found 188 matches in 125 files 

